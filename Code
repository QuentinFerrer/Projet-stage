import pymysql.cursors
import numpy as np
from datetime import timedelta
import calendar as cal

def connectcursor():
    conn = pymysql.connect(host='localhost',
                             user='root',
                             port='',
                             password='',
                             database='stage')
    cursor = conn.cursor()
    return cursor

cursor =connectcursor()

#print(vr)
#print(len(vr))
###  Fin initialisation ###
def videoread(i):
    vr=[]
    cursor = connectcursor()
    cursor.execute("SELECT videoid FROM videosread WHERE userid=" + str(i))
    row = cursor.fetchone()
    while row:
        vr.append(str(row[0]))
        row = cursor.fetchone()
    return vr

### Fonction de conversion ###
def ConvStrTemps(L):
    n=len(L)
    temps=[]
    for i in range (n):
        if len(L[i])==5:
            temps.append(timedelta(minutes=10*int(L[i][0])+int(L[i][1]),seconds=10*int(L[i][3])+int(L[i][4])))
        if len(L[i])==8:
            temps.append(timedelta(hours=10*int(L[i][0])+int(L[i][1]),minutes=10*int(L[i][3])+int(L[i][4]),seconds=10*int(L[i][6])+int(L[i][7])))
    return temps

    
def Separationvideosdate(x,vr):
    v=vr
    v1=[]
    v2=[]
    n=len(v)
    cursor = connectcursor()
    for i in range(n):
        cursor.execute('SELECT date FROM videosread WHERE userid = ' + x + ' and videoid = ' + v[i] )
        row = cursor.fetchone()
        v1.append(row[0])
        v2.append(v1[i]-v1[0])
        a=i
        while a>0 and v2[a]<v2[a-1]:
            b,c,d=v[a],v1[a],v2[a]
            v[a],v1[a],v2[a]=v[a-1],v1[a-1],v2[a-1]
            v[a-1],v1[a-1],v2[a-1]=b,c,d
            a-=1
    m=np.mean(v2)
    q1,q2,q3=int(np.round(n/4)),int(np.round(n/2)),int(np.round(3*n/4))
    if m>v2[q3]:
        ind=q3
    else:
        if m>v2[q2]:
            ind=q2
        else:
            if m>v2[q1]:
                ind=q1
            else:
                ind=0
    return v[0:ind],v[ind:n]

def ConvFloatInt(L):
    n=len(L)
    for i in range (n):
        L[i]=int(L[i])
    return L

def ConvIntStr(L):
    n=len(L)
    for i in range (n):
        L[i]=str(L[i])
    return L

### FOnction qui récupère des données selon une liste d'id de vidéo ###

def fcategory(L):
    cursor =connectcursor()
    #Couteux pour l'instant
    n=len(L)
    c=[] #Liste ou il y a toutes les catégories
    c1=[] #Liste ou les catégories n'apparaissent qu'une seule fois
    c2=[]
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT category FROM videos WHERE id=" + str(L[i]))
        row = cursor.fetchone()
        c.append(row[0])
        if row[0] not in c1:
            c1.append(row[0])
            c2.append(c.count(row[0]))
    

    ### Savoir s'il y a plusieurs catégories, cela est utile pour les suggestions après et qu'elles sont les catégories qui dominent les autres
    if len(c)==len(c1) :
        a=len(c)
    else:
        a=1
        while a< len(c2) and c2[0]==c2[a]:
            a+=1
        
    return c1,a


def separationmots(L):
    n=len(L)
    mots=[]
    i=0
    j=1
    arret = 0
    while arret ==0:
        if L[j]!=',' and j < n:
            j+=1
        else:
            mots.append(L[i:j])
            i=j+1
            j=i+1
        if j==n:
            mots.append(L[i:j])
            arret=1
    return mots
       
     
def ftags(L): #Meme fonction de fcategory mais avec les tags
    n=len(L)
    t1=[] 
    cursor =connectcursor()
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT tags FROM videos WHERE id=" + L[i])
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            if R[j] not in t1:
                t1.append(R[j])

    return t1

def ftype(L): #Meme fonction de fcategory mais avec les types
    n=len(L)
    t1=[] 
    cursor =connectcursor()
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT type FROM videos WHERE id=" + L[i])
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            if R[j] not in t1:
                t1.append(R[j])
                row = cursor.fetchone()
    return t1



### Suggestion quand il y a plusieurs catégories dans la liste de vidéos ###
    
def suggestioncategale(L):
    cursor =connectcursor()
    cat,p=fcategory(L)
    tag=ftags(L)
    L=[int("".join(x)) for x in L]
    #On va hierarchiser les videos selon l'utilisateur
    tiers2=[]
    tiers3=[]
    
    ### Suggestion basée sur la base de données ### 
    
    for i in range (len(cat)):
        
        for j in range(len(tag)):
            cursor.execute('SELECT id FROM videos WHERE category LIKE \'%' + cat[i] + '%\' and tags LIKE \'%' + tag[j] + '%\'')
            row = cursor.fetchone()
            while row :
                if row[0] not in tiers2 and row[0] not in L :
                    tiers2.append(row[0])
                row = cursor.fetchone()
                
                
        cursor.execute('SELECT id FROM videos WHERE category LIKE \'%' + cat[i] + '%\'')
        row = cursor.fetchone()
        while row :
            if row[0] not in tiers2  and row[0] not in tiers3 and row[0] not in L :
                tiers3.append(row[0])
            row = cursor.fetchone()
    tiers2=tri(L,tiers2)
    tiers3=tri(L,tiers3)
    return tiers2,tiers3

### Suggestions quand il y a qu'une seule catégorie de vidéos regardées ###
    
def suggestioncatdiff(L):
    cursor =connectcursor()
    cat,f=fcategory(L)
    tag=ftags(L)
    L=[int("".join(x)) for x in L]
    #On va hierarchiser les videos selon l'utilisateur
    tiers2=[]
    tiers3=[]
    
    ### Suggestion basée sur la base de données ### 
    for k in range (len(cat)):
        for i in range (len(tag)):
            cursor.execute('SELECT id FROM videos WHERE tags LIKE \'%' + tag[i] + '%\' and category LIKE \'%' + cat[k] + '%\'')
            row = cursor.fetchone()
            while row :
                if row[0] not in tiers2 and row[0] not in L :
                    tiers2.append(row[0])
                row = cursor.fetchone()
                    
                    
            cursor.execute('SELECT id FROM videos WHERE category LIKE \'%' + cat[k] + '%\'')
            row = cursor.fetchone()
            while row :
                if k<f:
                    if row[0] not in tiers2 and  row[0] not in L :
                        tiers2.append(row[0])
                else :
                    if row[0] not in tiers2 and row[0] not in tiers3 and row[0] not in L :
                        tiers3.append(row[0])
                row = cursor.fetchone()
    tiers2=tri(L,tiers2)
    tiers3=tri(L,tiers3)

    return tiers2, tiers3

### Fonction qui trie une liste de vidéo en fonction des tags et du temps d'une liste de vidéos regardées ###
    
def tri(Lu,Ls):
    cursor =connectcursor()
    n=len(Ls)
    tab=np.zeros((2,n))
    tab[0,:]=Ls
    t=[]
    for i in range (len(Lu)):
        cursor.execute("SELECT tags FROM videos WHERE id=" + str(Lu[i]))
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            t.append(R[j])
    for i in range (n):
        v=0
        cursor.execute("SELECT tags FROM videos WHERE id=" + str(Ls[i]))
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            v+=t.count(R[j])
            row = cursor.fetchone()
        tab[1,i]=v
    

    
    Temps=[]
    
    for i in range (len(Lu)):
        cursor.execute("SELECT length FROM videos WHERE id=" + str(Lu[i]))
        row = cursor.fetchone()
        while row:
            #print (str(row[0]))
            Temps.append(str(row[0]))
            row = cursor.fetchone()
    moy=np.mean(ConvStrTemps(Temps))
    
    temps2=[]
    for i in range (len(Ls)):
        cursor.execute("SELECT length FROM videos WHERE id=" + str(Ls[i]))
        row = cursor.fetchone()
        while row:
            #print (str(row[0]))
            temps2.append(str(row[0]))
            row = cursor.fetchone()
    
    temps2=ConvStrTemps(temps2)
    
    for i in range (n):
        a=i
        b=a+1
        while b<n and a>=0 and (tab[1,b]>tab[1,a] or (tab[1,a]==tab[1,b] and np.abs(temps2[b]-moy)<np.abs(temps2[a]-moy))):
            c=int(tab[0,b])
            d=int(tab[1,b])
            e=temps2[b]
            tab[:,b]=tab[:,a]
            temps2[b]=temps2[a]
            tab[0,a]=c
            tab[1,a]=d
            temps2[a]=e
            b=a
            a=a-1
            
    return list(tab[0,:])
            
### Fonction de suggestions basée sur le visionnage des autres utilisateurs ###
def suggestionusers(user,L,tiers2,tiers3,tiers4,nbre):
    cursor =connectcursor()
    tiers1=[]
    n=len(L)
    taux=round((4/5)*n)#sert à fixer un minimum de vidéos en commun 
    vid=[]
    for i in range(n):
        idother=[]
        cursor.execute('SELECT userid FROM videosread WHERE videoid =' + str(L[i]) )
        row = cursor.fetchone()
        while row :
            if int(row[0]) != int(user) :
                idother.append(row[0])
            row = cursor.fetchone()
        for j in range (len(idother)):
            idvid=[]
            cursor.execute('SELECT videoid FROM videosread WHERE userid =' + str(idother[j]))
            row = cursor.fetchone()
            while row :
                idvid.append(row[0])
                row = cursor.fetchone()       
            a=0
            for k in range(n):
                if idvid.count(int(L[k]))!=0:
                    a+=1
                    idvid.remove(int(L[k]))
            if a>=taux:
                vid.extend(idvid)
    vid=list(set(vid))
    t=0
    t1=[3/4,2/3,1/2]
    while  t<len(t1)  and CompteID(vid,tiers2,tiers3,tiers4)<nbre:
        taux=round((t1[t])*n)#sert à fixer un minimum de vidéos en commun 
        vid=[]
        for i in range(n):
            idother=[]
            cursor.execute('SELECT userid FROM videosread WHERE videoid =' + str(L[i]) )
            row = cursor.fetchone()
            while row :
                if int(row[0]) != int(user) :
                    idother.append(row[0])
                row = cursor.fetchone()
            for j in range (len(idother)):
                idvid=[]
                cursor.execute('SELECT videoid FROM videosread WHERE userid =' + str(idother[j]))
                row = cursor.fetchone()
                while row :
                    idvid.append(row[0])
                    row = cursor.fetchone()       
                a=0
                for k in range(n):
                    if idvid.count(int(L[k]))!=0:
                        a+=1
                        idvid.remove(int(L[k]))
                if a>=taux:
                    vid.extend(idvid)
        vid=list(set(vid))
        t+=1
    if CompteID(vid,tiers2,tiers3,tiers4)<nbre:
        tmp=0
    else:
        tmp=1
    
    for i in range (len(vid)):
        a=vid[i]
        if tiers2.count(vid[i])!=0:
            tiers2.remove(a)
            tiers1.append(a)
        else:
            if tiers3.count(vid[i])!=0:
                tiers3.remove(a)
                tiers2.append(a)
            else:
                if tiers4.count(vid[i])!=0:
                    tiers4.remove(a)
                    tiers3.append(a)
                else:
                    tiers4.append(a)
    
    return tiers1,tiers2,tiers3,tiers4,tmp   


def CompteID(vid,tiers2,tiers3,tiers4):
    a=0
    for i in range (len(vid)):
        if tiers2.count(vid[i])==0:
            if tiers3.count(vid[i])==0:
                if tiers4.count(vid[i])==0:
                    a+=1
    return (len(tiers2)+len(tiers3)+len(tiers4)+a)
                


### Fonction qui réajuste des groupes de vidéos selon la langue 
def triLang(L,T1,T2,T3,T4):
    cursor =connectcursor()
    T0=[]
    n=len(L)
    c=[] #Liste ou il y a toutes les catégories
    c1=[] #Liste ou les catégories n'apparaissent qu'une seule fois
    c2=[] #Liste qui va compter le nombre de fois qu'apparait chaque catégorie, utile pour les trier
    
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT lang FROM videos WHERE id=" + L[i])
        row = cursor.fetchone()
        c.append(row[0])
        if row[0] not in c1:
            c1.append(row[0])
    
    n=len(c1)
    if n>1:
        for i in range (n):
            mot=c1[i]
            c2.append(c.count(mot))
        
        for i in range (n-1): #Trie les langues des vidéos les plus regardées
            a=i
            b=i+1
            while c2[b]>c2[a] and a>=0:
                poids=c2[b]
                c2[b]=c2[a]
                c2[a]=poids
                mot=c1[b]
                c1[b]=c1[a]
                c1[a]=mot
                b=a
                a=b-1
        c3=[]
        c3.append(c1[0])
        i=0
        while i< (len(T1)): 
            cursor.execute("SELECT lang FROM videos WHERE id=" + str(T1[i]))
            row = cursor.fetchone()
            if row[0] in c3:
                T0.append(T1[i])
                T1.remove(T1[i])
            else:
                i+=1
        i=0
        while i< (len(T2)): 
            cursor.execute("SELECT lang FROM videos WHERE id=" + str(T2[i]))
            row = cursor.fetchone()
            if row[0] in c3:
                T1.append(T2[i])
                T2.remove(T2[i])
            else:
                i+=1
        i=0
        while i< (len(T3)): 
            cursor.execute("SELECT lang FROM videos WHERE id=" + str(T3[i]))
            row = cursor.fetchone()
            if row[0] in c3:
                T2.append(T3[i])
                T3.remove(T3[i])
            else:
                i+=1
        i=0
        while i< (len(T3)): 
            cursor.execute("SELECT lang FROM videos WHERE id=" + str(T3[i]))
            row = cursor.fetchone()
            if row[0] in c3:
                T3.append(T3[i])
                T4.remove(T3[i])
            else:
                i+=1
        
    else:
        T0=T1
        T1=T2
        T2=T3
        T3=T4
        T4=[]
    return T0,T1,T2,T3,T4
        
        
def suggestiontag(L,tiers1,tiers2,tiers3,tiers4,tiers5):
    cursor =connectcursor()
    tag=ftags(L)
    L=[int("".join(x)) for x in L]
    add=[]
    for i in range (len(tag)):
        cursor.execute('SELECT id FROM videos WHERE tags LIKE \'%' + tag[i] + '%\'')
        row = cursor.fetchone()
        while row :
            if row[0] not in tiers2 and row[0] not in L and row[0] not in tiers1 and row[0] not in tiers3 and row[0] not in tiers4 and row[0] not in tiers5:
                add.append(row[0])
            row = cursor.fetchone()

    add=tri(L,add)
    tiers5.extend(add)

    return tiers1,tiers2,tiers3,tiers4,tiers5 

def suggestiontyp(L,tiers1,tiers2,tiers3,tiers4,tiers5):
    cursor =connectcursor()
    typ=ftype(L)
    L=[int("".join(x)) for x in L]
    add=[]
    for i in range (len(typ)):
        cursor.execute('SELECT id FROM videos WHERE type LIKE \'%' + typ[i] + '%\'')
        row = cursor.fetchone()
        while row :
            if row[0] not in tiers2 and row[0] not in L and row[0] not in tiers1 and row[0] not in tiers3 and row[0] not in tiers4 and row[0] not in tiers5:
                add.append(row[0])
            row = cursor.fetchone()

    add=tri(L,add)
    tiers5.extend(add)

    return tiers1,tiers2,tiers3,tiers4,tiers5

def suggestionvidsep(user,L):
    cat,t=fcategory(L)
    if t==len(cat):
        tiers2, tiers3 = suggestioncategale(L)
    else:
        tiers2,tiers3= suggestioncatdiff(L)
          
    return tiers2,tiers3

def supprvidinit(L,t1,t2):
    for i in range (len(L)):
        if int(L[i]) in t1:
            t1.remove(int(L[i]))
        if int(L[i]) in t2:
            t2.remove(int(L[i]))
    return t1,t2

def Fusion(t1,t2,T1,T2):
    t3=[]
    for i in range (len(T1)):
        if T1[i] in t2:
            t1.append(T1[i])
            t2.remove(T1[i])
        else:
            if T1[i] not in t1:
                t2.append(T1[i])               
    
    for i in range (len(T2)):
        if T2[i] not in t1 and T2[i] not in t2:
            t3.append(T2[i])   
    return t1,t2,t3

def suggestion(user,nbre):
    
    L=videoread(user)
    va,vr=Separationvideosdate(user,L)
    
    tiers2,tiers3=suggestionvidsep(user,vr)
    T2,T3=suggestionvidsep(user,va)
    
    tiers2,tiers3=supprvidinit(L,ConvFloatInt(tiers2),ConvFloatInt(tiers3))
    T2,T3=supprvidinit(L,ConvFloatInt(T2),ConvFloatInt(T3))
    
    tiers2,tiers3,tiers4=Fusion(tiers2,tiers3,T2,T3)
    
    tiers1,tiers2,tiers3,tiers4,tmp=suggestionusers(user,L,tiers2,tiers3,tiers4,nbre)
    
    
    tiers1=ConvFloatInt(tri(L,tiers1))
    tiers2=ConvFloatInt(tri(L,tiers2))
    tiers3=ConvFloatInt(tri(L,tiers3))
    tiers4=ConvFloatInt(tri(L,tiers4))
    
    tiers1,tiers2,tiers3,tiers4,tiers5=triLang(L,tiers1,tiers2,tiers3,tiers4)
    
    if tmp ==0:
        tiers1,tiers2,tiers3,tiers4,tiers5=suggestiontag(L,tiers1,tiers2,tiers3,tiers4,tiers5)
        tmp=len(tiers1)+len(tiers2)+len(tiers3)+len(tiers4)+len(tiers5)
        if tmp <nbre:
            tiers1,tiers2,tiers3,tiers4,tiers5=suggestiontyp(L,tiers1,tiers2,tiers3,tiers4,tiers5)
            tmp=len(tiers1)+len(tiers2)+len(tiers3)+len(tiers4)+len(tiers5)
            if tmp<nbre:
                #print("nombre de suggestions demandées trop grand, voici le nombre de suggestion : ",tmp)
                nbre=tmp
    
    tiers1=ConvFloatInt(tiers1)
    tiers2=ConvFloatInt(tiers2)
    tiers3=ConvFloatInt(tiers3)       
    tiers4=ConvFloatInt(tiers4)
    tiers5=ConvFloatInt(tiers5)
    #print('t1=',tiers1)
    #print('t2=',tiers2)
    #print('t3=',tiers3)
    #print('t4=',tiers4)
    
    ### Résultat selon le nombre de suggestion
    res=[]
    a=0
    l1=len(tiers1)
    l2=len(tiers2)
    l3=len(tiers3)
    l4=len(tiers4)

    while len(res)<nbre:
        if a<l1:
            res.append(tiers1[a])
            a+=1
        else:
            if a-l1<l2:
                res.append(tiers2[a-l1])
                a+=1
            else:
                if a-l1-l2<l3:
                    res.append(tiers3[a-l1-l2])
                    a+=1
                else:
                    if a-l1-l2-l3<l4:
                        res.append(tiers4[a-l1-l2-l3])
                        a+=1
                    else:
                        res.append(tiers5[a-l1-l2-l3-l4])
                        a+=1
    res=ConvIntStr(res)
    return res

"""

x=str(input("id de la personne ="))

nbre=int(input('Nombre de suggestion ='))

print(suggestion(x,nbre))
"""

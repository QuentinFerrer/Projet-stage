import pymysql.cursors
import numpy as np


connection = pymysql.connect(host='localhost',
                             user='root',
                             port='',
                             password='',
                             database='stage')

x=str(input("id de la personne ="))
### Initialisation des vidéos regardés pour l'user x  ###
vr=[]
cursor = connection.cursor()
cursor.execute("SELECT videoid FROM videosread WHERE userid=" + x)
row = cursor.fetchone()
while row:
    #print (str(row[0]))
    vr.append(str(row[0]))
    row = cursor.fetchone()
#print(vr)
#print(len(vr))
###  Fin initialisation ###

def ListFtoI(L):
    n=len(L)
    for i in range (n):
        L[i]=int(L[i])
    return L

def fcategory(L): #Couteux pour l'instant
    n=len(L)
    c=[] #Liste ou il y a toutes les catégories
    c1=[] #Liste ou les catégories n'apparaissent qu'une seule fois
    c2=[] #Liste qui va compter le nombre de fois qu'apparait chaque catégorie, utile pour les trier
    
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT category FROM videos WHERE id=" + L[i])
        row = cursor.fetchone()
        c.append(row[0])
        if row[0] not in c1:
            c1.append(row[0])
    
    n=len(c1)
    if n>1:
        for i in range (n):
            mot=c1[i]
            c2.append(c.count(mot))
        
        for i in range (n-1): #Trie les catégories les plus regardées
            a=i
            b=i+1
            while c2[b]>c2[a] and a>=0:
                poids=c2[b]
                c2[b]=c2[a]
                c2[a]=poids
                mot=c1[b]
                c1[b]=c1[a]
                c1[a]=mot
                b=a
                a=b-1
    ### Savoir s'il y a plusieurs catégories, cela est utile pour les suggestions après
    if len(c)==len(c1):
        t=1
    else:
        t=0
    return c1,t


def separationmots(L):
    n=len(L)
    mots=[]
    i=0
    j=1
    arret = 0
    while arret ==0:
        if L[j]!=',' and j < n:
            j+=1
        else:
            mots.append(L[i:j])
            i=j+1
            j=i+1
        if j==n:
            mots.append(L[i:j])
            arret=1
    return mots
       
     
def ftags(L): #Meme fonction de fcategory mais avec les tags
    n=len(L)
    t=[] 
    t1=[] 
    t2=[] 
    
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT tags FROM videos WHERE id=" + L[i])
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            t.append(R[j])
            if R[j] not in t1:
                t1.append(R[j])
    
    n=len(t1)
    if n>1:
        for i in range (n):
            mot=t1[i]
            t2.append(t.count(mot))
 
        
        for i in range (n-1): #Trie les catégories les plus regardées
            a=i
            b=i+1
            while t2[b]>t2[a] and a>=0:
                poids=t2[b]
                t2[b]=t2[a]
                t2[a]=poids
                mot=t1[b]
                t1[b]=t1[a]
                t1[a]=mot
                b=a
                a=b-1

    return t1

def ftype(L): #Meme fonction de fcategory mais avec les type
    n=len(L)
    t=[] 
    t1=[] 
    t2=[] 
    
    for i in range (n): #Ajout des catégories
        cursor.execute("SELECT type FROM videos WHERE id=" + L[i])
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            t.append(R[j])
            if R[j] not in t1:
                t1.append(R[j])
    
    n=len(t1)
    if n>1:
        for i in range (n):
            mot=t1[i]
            t2.append(t.count(mot))
 
        
        for i in range (n-1): #Trie les catégories les plus regardées
            a=i
            b=i+1
            while t2[b]>t2[a] and a>=0:
                poids=t2[b]
                t2[b]=t2[a]
                t2[a]=poids
                mot=t1[b]
                t1[b]=t1[a]
                t1[a]=mot
                b=a
                a=b-1

    return t1




def suggestioncat(L):
    
    cat,p=fcategory(L)
    tag=ftags(L)
    L=[int("".join(x)) for x in L]
    #On va hierarchiser les videos selon l'utilisateur
    tiers2=[]
    tiers3=[]
    
    ### Suggestion basée sur la base de données ### 
    
    for i in range (len(cat)):
        
        for j in range(len(tag)):
            cursor.execute('SELECT id FROM videos WHERE category LIKE \'%' + cat[i] + '%\' and tags LIKE \'%' + tag[j] + '%\'')
            row = cursor.fetchone()
            while row :
                if row[0] not in tiers2 and row[0] not in L :
                    tiers2.append(row[0])
                row = cursor.fetchone()
                
                
        cursor.execute('SELECT id FROM videos WHERE category LIKE \'%' + cat[i] + '%\'')
        row = cursor.fetchone()
        while row :
            if row[0] not in tiers2  and row[0] not in tiers3 and row[0] not in L :
                tiers3.append(row[0])
            row = cursor.fetchone()
    tiers2=tritags(L,tiers2)
    tiers3=tritags(L,tiers3)
    return tiers2,tiers3


def suggestiontag(L):
    
    tag=ftags(L)
    typ=ftype(L)
    L=[int("".join(x)) for x in L]
    #On va hierarchiser les videos selon l'utilisateur
    tiers2=[]
    tiers3=[]
    
    ### Suggestion basée sur la base de données ### 
    
    for i in range (len(tag)):
        
        for j in range(len(typ)):
            cursor.execute('SELECT id FROM videos WHERE type LIKE \'%' + typ[j] + '%\' and tags LIKE \'%' + tag[i] + '%\'')
            row = cursor.fetchone()
            while row :
                if row[0] not in tiers2 and row[0] not in L :
                    tiers2.append(row[0])
                row = cursor.fetchone()
                
                
        cursor.execute('SELECT id FROM videos WHERE tags LIKE \'%' + tag[i] + '%\'')
        row = cursor.fetchone()
        while row :
            if row[0] not in tiers2 and row[0] not in tiers3 and row[0] not in L :
                tiers3.append(row[0])
            row = cursor.fetchone()
    tiers2=tritags(L,tiers2)
    tiers3=tritags(L,tiers3)

    return tiers2, tiers3


def tritags(Lu,Ls): #rajouter une étude selon le temps en moyenne de vidéos regardés
    n=len(Ls)
    tab=np.zeros((2,n))
    tab[0,:]=Ls
    t=[]
    for i in range (len(Lu)):
        cursor.execute("SELECT tags FROM videos WHERE id=" + str(Lu[i]))
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            t.append(R[j])
    for i in range (n):
        v=0
        cursor.execute("SELECT tags FROM videos WHERE id=" + str(Ls[i]))
        row = cursor.fetchone()
        R=separationmots(row[0])
        for j in range (len(R)):
            v+=t.count(R[j])
            row = cursor.fetchone()
        tab[1,i]=v
    for i in range (n):
        a=i
        b=a+1
        while b<n and tab[1,b]>tab[1,a] and a>=0 :
            c=int(tab[0,b])
            d=int(tab[1,b])
            tab[:,b]=tab[:,a]
            tab[0,a]=c
            tab[1,a]=d
            b=a
            a=a-1
    return list(tab[0,:])
            
            
def suggestionusers(user,L):
    ### Suggestions basée sur le visionnage des autres utilisateurs ###
    n=len(L)
    taux=round((3/4)*n) #sert à fixer un minimum de vidéos en commun 
    vid=[]
    for i in range(n):
        idother=[]
        cursor.execute('SELECT userid FROM videosread WHERE videoid =' + str(L[i]) )
        row = cursor.fetchone()
        while row :
            if int(row[0]) != int(user) :
                idother.append(row[0])
            row = cursor.fetchone()
        for j in range (len(idother)):
            idvid=[]
            cursor.execute('SELECT videoid FROM videosread WHERE userid =' + str(idother[j]))
            row = cursor.fetchone()
            while row :
                idvid.append(row[0])
                row = cursor.fetchone()       
            a=0
            for k in range(n):
                if idvid.count(int(L[k]))!=0:
                    a+=1
                    idvid.remove(int(L[k]))
            if a>=taux:
                vid.extend(idvid)
    
    vid=list(set(vid))
    
    return vid     


def suggestion(user,L,nbre):
    cat,t=fcategory(L)
    if t==0:
        tiers2, tiers3 = suggestioncat(L)
    else:
        tiers2,tiers3= suggestiontag(L)
        
    tiers1=[]
    vid=suggestionusers(user,L)
    #print('vid',vid)
    #print('t1=',tiers1)
    #print('t2=',tiers2)
    #print('t3=',tiers3)
    ### assemblage des deux ###
    
    for i in range (len(vid)):
        if tiers2.count(vid[i])!=0:
            a=vid[i]
            tiers2.remove(a)
            tiers1.append(a)
        else:
            if tiers3.count(vid[i])!=0:
                a=vid[i]
                tiers3.remove(a)
                tiers2.append(a)
            else:
                a=vid[i]
                tiers3.append(a)
    tiers1=ListFtoI(tritags(L,tiers1))
    tiers2=ListFtoI(tritags(L,tiers2))
    tiers3=ListFtoI(tritags(L,tiers3))
    #print('t1=',tiers1)
    #print('t2=',tiers2)
    #print('t3=',tiers3)
    
    ### Résultat selon le nombre de suggestion
    res=[]
    a=0
    l1=len(tiers1)
    l2=len(tiers2)
    while len(res)<nbre:
        if a<l1:
            res.append(tiers1[a])
            a+=1
        else:
            if a-l1<l2:
                res.append(tiers2[a-l1])
                a+=1
            else:
                res.append(tiers3[a-l1-l2])
                a+=1
    return res


    
nbre=int(input('Nombre de suggestion ='))
print(suggestion(x,vr,nbre))

connection.close()
